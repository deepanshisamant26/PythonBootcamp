# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NVG-883ys5BIc8JT85EpeZLyzQbv6OlH

#ques 1
"""

dec=int(input("Enter decimal no.:"))
print("octal equivalent:",dec_to_oct(dec))
def dec_to_oct(dec):
	oct=0
	i=1
	while(dec!=0):
		oct=oct+(dec%8)*i
		dec=int(dec/8)
		i=i*10
	return oct

"""#ques 2"""

n1=int(input("enter number"))
n2=int(input("enter number"))
ch=input("enter choice")
if ch=="*":
   print(n1*n2)
elif ch=="/":
   print(n1/n2)
elif ch=="%":
   print(n1%n2)
elif ch=="+":
   print(n1+n2)
elif ch=="-":
   print(n1-n2)
else:
   print("invalid")

"""#ques 3"""

def check(ch):
    if (ch >= 'A' and ch <= 'Z'):
        print(ch,"is an UpperCase character");
    elif (ch >= 'a' and ch <= 'z'):
        print(ch,"is an LowerCase character");
    else:
        print(ch,"is not an aplhabetic character");
ch='A'
check(ch)

"""# ques 4"""

n = 4562
rev = 0
while(n > 0):
    a = n % 10
    rev = rev * 10 + a
    n = n // 10
print(rev)

"""#ques 6"""

def compute_gcd(x, y):
# choose the smaller number
    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            gcd = i 
    return gcd
num1 = 54 
num2 = 24
print("The gcd is", compute_gcd(num1, num2))

"""#ques 7"""

def compute_lcm(x, y):
 
   # choose the greater number
   if x > y:
       greater = x
   else:
       greater = y
 
   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1
 
   return lcm
 
num1 = 54
num2 = 24
 
print("The L.C.M. is", compute_lcm(num1, num2))

"""#ques 8"""

lst = []
n = int(input("Enter number of elements : "))
for i in range(0, n):
    ele = int(input())
    lst.append(ele)      
print(lst)
count=0
i=0
for i in range(n): 
     if (lst[i]%5)==0:
         count=count+1
         i=i+1
print("multiple are",count)6

"""**question 9**"""

from math import sqrt


def primeCount(arr, n):
	
	
	max_val = arr[0]
	for i in range(len(arr)):
		if(arr[i] > max_val):
			max_val = arr[i]

	
	prime =[ True for i in range(max_val + 1)]

	
	prime[0] = False
	prime[1] = False
	k = int(sqrt(max_val)) + 1
	for p in range(2, k, 1):
		
		
		if (prime[p] == True):
			
			
			for i in range(p * 2, max_val + 1, p):
				prime[i] = False

	
	count = 0
	for i in range(0, n, 1):
		if (prime[arr[i]]):
			count += 1

	return count


if __name__ == '__main__':
	arr = [1, 2, 3, 4, 5, 6, 7,13]
	n = len(arr)

	print(primeCount(arr, n))

"""# 10"""



list=[10,9,11,12,13,16,19,80]
print("original list: "+str(list))
flag=0

if(all(list[i]<=list[i+1] for i in range(len(list)-1))):

    flag=1
  
if ( flag):
  print("array is sorted")
else:
  print("array is unsorted")

"""**ques** **11**


"""

numbers = [1,0,1,1,1,0,0,0,1,0,0,1,1]
  

numbers.sort()
print(numbers)

"""**ques 12**"""

def two_way_sort(arr, arr_len):
     
    l, r = 0, arr_len - 1
    k = 0
    while(l < r):
         
        while(arr[l] % 2 != 0):
            l += 1
            k += 1  
        while(arr[r] % 2 == 0 and l < r):
            r -= 1
        if(l < r):
            arr[l], arr[r] = arr[r], arr[l]
    odd = arr[:k]
    even = arr[k:]

    odd.sort(reverse = True)
    even.sort()
     

    odd.extend(even)
     
    return odd
     

arr_len = 8
arr = [3,8,5,13,6,12,18,5]
result = two_way_sort(arr, arr_len)
for i in result:
    print(str(i) + "  ",end=" "),

"""**ques 13**"""

def reverseList(A):
  print( A[::-1])
     

A = [1,2,3,4,5,6]
print(A)
print("Reversed list is")
reverseList(A)

"""**ques 14**"""

def printPairs(arr, n, sum):
 
    
    for i in range(0, n ):
        for j in range(i + 1, n ):
            if (arr[i] + arr[j] == sum):
                print("(", arr[i],
                      ", ", arr[j],
                      ")", sep = "")
                
arr = [3, 1, 11, 2, 9, 7, 4, 5, -1, 13, 6]
n = len(arr)
sum = 8
printPairs(arr, n, sum)

"""**ques 15**"""

def findTriplets(arr, n, sum):
 
    for i in range(0, n - 2):
        for j in range(i + 1, n - 1):
            for k in range(j + 1, n):
                if (arr[i] + arr[j] +
                    arr[k] == sum):
                    print(arr[i], " ",
                          arr[j], " ",
                          arr[k], sep = "")
             

arr = [ 3, 1, 2, 9, 7, 5, -1, 6 ]
n = len(arr)
findTriplets(arr, n, 9)

"""**question 16**"""

def combinationUtil(arr, n, r,
                    index, data, i):
    
    if(index == r):
        for j in range(r):
            print(data[j], end = " ")
        print(" ")
        return
 
    
    if(i >= n):
        return
 
    
    data[index] = arr[i]
    combinationUtil(arr, n, r,
                    index + 1, data, i + 1)
     
    
    combinationUtil(arr, n, r, index,
                    data, i + 1)

def printcombination(arr, n, r):


    data = list(range(r))


    combinationUtil(arr, n, r,0, data, 0)
 
 

arr = [7, 2, 6]
n = len(arr)

for r in range(1,n+1):
    printcombination(arr, n, r)